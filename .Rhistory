library(plotly)
# Create the plot
p<- ggplot(gapminder, aes(year,lifeExp)) +
geom_line() +
# Facet on country and continent
facet_trelliscope(~ country + continent.
as_plotly = TRUE)
library(gapminder)
library(ggplot2)
library(trelliscopejs)
library(plotly)
# Create the plot
ggplot(gapminder, aes(year,lifeExp)) +
geom_line() +
# Facet on country and continent
facet_trelliscope(~ country + continent,
as_plotly = TRUE)
install.packages("geofacet")
grid_design(data = aus_grid1, img = "http://www.john.chapman.name/Austral4.gif")
library(ggplot2)
library(geofacet)
remotes::install_github("hafen/geofacet")
install_github("hafen/geofacet")
install.packages("remotes")
install_github("hafen/geofacet")
remotes::install_github("hafen/geofacet")
remotes::install_github("hafen/geofacet")
install.packages("geofacet")
library(ggplot2)
library(geofacet)
library(ggmap)
install.packages(ggmap)
install.packages("ggmap")
install.packages("ggmap")
install.packages(ggmap)
library(ggplot2)
library(geofacet)
library(ggmap)
library(leaflet)
names(providers)
set.seed(1234)# Set seed for reproducibility
n <- 100X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5))# Generate random points
y <-as.integer(rowSums(Xˆ2)<1)# Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
set.seed(1234)# Set seed for reproducibility
n <- 100
X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
y <-as.integer(rowSums(Xˆ2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
y <- as.integer(rowSums(Xˆ2)<1)
y <- as.integer(rowSums(X^2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
K=10
eta=0.25
alpha=0.5
H=25
is <-c(sample(which(y==0),K),sample(which(y==1),K))
X.prototype <- X[is,]
y.prototype <- y[is]                # Will be K times 0, followed by K times 1
View(X.prototype)
View(X)
View(X.prototype)
View(X.prototype)
closest.point <- function(X_matrix,x_vector){
## check dimensions of X_matrix
if(ncol(X_matrix)!=length(x_vector))
stop("ERR-01:Number of columns in Matrix does not equal vector's length")
## Calculate sum of squared differnce per row
z<-t((t(X_matrix)-(x_vector))^2)     # X_matrix needs to be transposed to obtain correct result
## return row number
which.min(rowSums(z))
}
closest.point(X,X.prototype[1,])
closest.point(X,X.prototype[1,])
closest.point(X,X.prototype[1,])
closest.point(X,X.prototype[1,])
closest.point(X.prototype,X[1,])
closest.point(X.prototype,X[1,])
X.prototype[6,]
X[1,]
X.prototype[6,]-X[1,]
-0.9398316 - -1.15889
library(ggplot2)
t <-seq(0, 2*pi, len=1000)
circle <-data.frame(x1=sin(t), x2=cos(t))
ggplot() +geom_point(aes(x1, x2, colour=as.factor(y)), data=as.data.frame(X)) +
geom_path(aes(x1, x2), data=circle) +coord_equal(ratio=1)
predict.learnvq <- function(object,Xnew=object$X){
for(i in 1:nrow(Xnew)){
k <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
mylearnvq <- learnvq(X,y)
#' learnvq class constructor
#' @param  X covariate matrix
#' @param  y vector of class labels
#' @param  K number of prototype of each class (default=10)
#' @param  eta initial learning rate (default=0.25)
#' @param  alpha learning rate update (default=0.25)
#' @param  H
#' @return object of class learnvq
learnvq <- function(X,y,K=10,eta=0.25,alpha=0.5,H=25){
## Initial prototypes (from instructions)
is <-c(sample(which(y==0),K),sample(which(y==1),K))
X.prototype <- X[is,]
y.prototype <- y[is]                # Will be K times 0, followed by K times 1
for (h in 1:H){
for(i in 1:length(y)){
##find the closest point using the function developed in task 4
k <-closest.point(X.prototype,X[i,])
if(y[i]==y.prototype[k]){
X.prototype[k,] = X.prototype[k,] + eta*(X[i,]-X.prototype[k,])
}else{
X.prototype[k,] = X.prototype[k,] - eta*(X[i,]-X.prototype[k,])
}
}
#Reduce the learning rate by setting
eta <- eta*alpha
}
#create list, add class type and add result
result <- list()
class(result) <- "learnvq"
result$X <- X
result$y <- y
result$X.prototype <- X.prototype
result$y.prototype <- y.prototype
#return
return(result)
}
View(learnvq)
mylearnvq <- learnvq(X,y)
predict(mylearnvq)
closest.point <- function(X_matrix,x_vector){
## check dimensions of X_matrix
if(ncol(X_matrix)!=length(x_vector))
stop("ERR-01:Number of columns in Matrix does not equal vector's length")
## Calculate sum of squared differnce per row
z<-t((t(X_matrix)-(x_vector))^2)     # X_matrix needs to be transposed to obtain correct result
## return row number
which.min(rowSums(z))
}
learnvq <- function(X,y,K=10,eta=0.25,alpha=0.5,H=25){
## Initial prototypes (from instructions)
is <-c(sample(which(y==0),K),sample(which(y==1),K))
X.prototype <- X[is,]
y.prototype <- y[is]                # Will be K times 0, followed by K times 1
for (h in 1:H){
for(i in 1:length(y)){
##find the closest point using the function developed in task 4
k <-closest.point(X.prototype,X[i,])
if(y[i]==y.prototype[k]){
X.prototype[k,] = X.prototype[k,] + eta*(X[i,]-X.prototype[k,])
}else{
X.prototype[k,] = X.prototype[k,] - eta*(X[i,]-X.prototype[k,])
}
}
#Reduce the learning rate by setting
eta <- eta*alpha
}
#create list, add class type and add result
result <- list()
class(result) <- "learnvq"
result$X <- X
result$y <- y
result$X.prototype <- X.prototype
result$y.prototype <- y.prototype
#return
return(result)
}
#####
##### b) - create learnvq predict function
predict.learnvq <- function(object,Xnew="training set"){
if(Xnew="training set") Xnew = object$X.prototype
for(i in 1:nrow(Xnew)){
k <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
predict.learnvq <- function(object,Xnew="training set"){
if(Xnew=="training set")
Xnew <- object$X.prototype
for(i in 1:nrow(Xnew)){
k <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
set.seed(1234)# Set seed for reproducibility
n <- 100
X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
y <- as.integer(rowSums(X^2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
mylearnvq <- learnvq(X,y)
predict(mylearnvq)
predict(mylearnvq)
predict.learnvq <- function(object,Xnew="training set"){
if(Xnew=="training set")
Xnew <- object$X
for(i in 1:nrow(Xnew)){
k <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
predict(mylearnvq)
predict(mylearnvq)
predict(mylearnvq,X)
predict.learnvq <- function(object,Xnew="training set"){
if(typeof(Xnew)=="character")
Xnew <- object$X
for(i in 1:nrow(Xnew)){
k <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
predict(mylearnvq,X)
object <- learnvq(X,y)
Xnew <- object$X
nrow(Xnew)
for(i in 1:nrow(Xnew)){
k <- closest.point(object$X.prototype,Xnew[i,])
}
k <- vector()
for(i in 1:nrow(Xnew)){
k[i] <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
predict.learnvq <- function(object,Xnew="training set"){
if(typeof(Xnew)=="character")
Xnew <- object$X
k <- vector()
for(i in 1:nrow(Xnew)){
k[i] <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
predict(mylearnvq,X)
X2 <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
mylearnvq <- learnvq(X,y)
predict(mylearnvq,X2)
plot.learnvq(object){
p <-ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)), data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)), shape=8, data=as.data.frame(object$X.prtotype)) +
return(p)
}
plot.learnvq(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)), data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)), shape=8, data=as.data.frame(object$X.prtotype)) +
return(p)
}
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)), data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)), shape=8, data=as.data.frame(object$X.prtotype)) +
return(p)
}
mylearnvq(plot)
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=8, data=as.data.frame(object$X.prtotype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=8, data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype),shape=8),
data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype),shape="8"),
data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype),shape=8),
data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=8,size=10,
data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=8,size=3,
data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=8,size=2,
data=as.data.frame(object$X.prototype))
return(p)
}
plot(mylearnvq)
ggplot() +
geom_point(aes(x1, x2, colour=as.factor(y)), data=as.data.frame(X)) +
geom_path(aes(x1, x2), data=circle) +coord_equal(ratio=1) +
labs(colour="yfewf")
circle <-data.frame(x1=sin(t), x2=cos(t))
ggplot() +
geom_point(aes(x1, x2, colour=as.factor(y)), data=as.data.frame(X)) +
geom_path(aes(x1, x2), data=circle) +coord_equal(ratio=1) +
labs(colour="yfewf")
t <-seq(0, 2*pi, len=1000)
circle <-data.frame(x1=sin(t), x2=cos(t))
ggplot() +
geom_point(aes(x1, x2, colour=as.factor(y)), data=as.data.frame(X)) +
geom_path(aes(x1, x2), data=circle) +coord_equal(ratio=1) +
labs(colour="yfewf")
closest.point <- function(X_matrix,x_vector){
## check dimensions of X_matrix
if(ncol(X_matrix)!=length(x_vector))
stop("ERR-01:Number of columns in Matrix does not equal vector's length")
## Calculate sum of squared differnce per row
z<-t((t(X_matrix)-(x_vector))^2)     # X_matrix needs to be transposed to obtain correct result
## return row number
which.min(rowSums(z))
}
#######################################
#######################################
#######################################
#### Task 5
#####
##### a) - function to create learnvq objects
#' learnvq class constructor
#' @param  X covariate matrix
#' @param  y vector of class labels
#' @param  K number of prototype of each class (default=10)
#' @param  eta initial learning rate (default=0.25)
#' @param  alpha learning rate update (default=0.25)
#' @param  H
#' @return object of class learnvq
learnvq <- function(X,y,K=10,eta=0.25,alpha=0.5,H=25){
####checks
#X and Y need to be of same length
## Initial prototypes (from instructions)
is <-c(sample(which(y==0),K),sample(which(y==1),K))
X.prototype <- X[is,]
y.prototype <- y[is]                # Will be K times 0, followed by K times 1
for (h in 1:H){
for(i in 1:length(y)){
##find the closest point using the function developed in task 4
k <-closest.point(X.prototype,X[i,])
if(y[i]==y.prototype[k]){
X.prototype[k,] = X.prototype[k,] + eta*(X[i,]-X.prototype[k,])
}else{
X.prototype[k,] = X.prototype[k,] - eta*(X[i,]-X.prototype[k,])
}
}
#Reduce the learning rate by setting
eta <- eta*alpha
}
#create list, add class type and add result
result <- list()
class(result) <- "learnvq"
result$X <- X
result$y <- y
result$X.prototype <- X.prototype
result$y.prototype <- y.prototype
#return
return(result)
}
#####
##### b) - create learnvq predict function
#' predict function for learnvq model
#' @param  object Object of class learnvq
#' @param  Xnew new covariate matrix
#' @return prediction for covariate matrix
predict.learnvq <- function(object,Xnew="training set"){
if(typeof(Xnew)=="character")
Xnew <- object$X
k   <- vector()
for(i in 1:nrow(Xnew)){
k[i] <- closest.point(object$X.prototype,Xnew[i,])
}
y.prediction <- object$y.prototype[k]
return(y.prediction)
}
#####
##### c) - create learnvq plotting function
#' predict training and prototype data of learnvq model
#' @param  object Object of class learnvq
#' @return plot
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=8,size=2,
data=as.data.frame(object$X.prototype)) +
labs(colour="y")
return(p)
}
#####
##### d) - plot example
##code given in instructions
set.seed(1234)# Set seed for reproducibility
n <- 100
X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
y <- as.integer(rowSums(X^2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
#create learnvq class
mylearnvq <- learnvq(X,y)
#plot
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=7,size=2,
data=as.data.frame(object$X.prototype)) +
labs(colour="y")
return(p)
}
plot(mylearnvq)
plot.learnvq <- function(object){
p <- ggplot() +
geom_point(aes(x1, x2, colour=as.factor(object$y)),
data=as.data.frame(object$X)) +
geom_point(aes(x1, x2, colour=as.factor(object$y.prototype)),
shape=3,size=3,
data=as.data.frame(object$X.prototype)) +
labs(colour="y")
return(p)
}
set.seed(1234)# Set seed for reproducibility
n <- 100
X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
y <- as.integer(rowSums(X^2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
#create learnvq class
mylearnvq <- learnvq(X,y)
#plot
plot(mylearnvq)
set.seed(1234)# Set seed for reproducibility
n <- 100
X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
y <- as.integer(rowSums(X^2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
#create learnvq class
mylearnvq <- learnvq(X,y)
#plot
plot(mylearnvq)
set.seed(1234)# Set seed for reproducibility
n <- 100
X <-cbind(x1 =runif(n, -1.5, 1.5),x2 =runif(n, -1.5, 1.5)) # Generate random points
y <- as.integer(rowSums(X^2)<1) # Determine whether inside the circle#
idx <-sample(100, 10)# Mess up 10 class labels ...
y[idx] <- 1-y[idx]    # ... by flipping the label
#create learnvq class
mylearnvq <- learnvq(X,y)
#plot
plot(mylearnvq)
setwd("~/Google Drive/GitHub/Web-Scraping-Plebiscito")
debugSource('~/Google Drive/GitHub/Web-Scraping-Plebiscito/ScrapingServel.R')
rd$closeServer();rd$close();remDr$server$stop()
debugSource('~/Google Drive/GitHub/Web-Scraping-Plebiscito/ScrapingServel.R')
rd$closeServer();rd$close();remDr$server$stop()
